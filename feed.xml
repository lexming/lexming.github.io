<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://lexming.github.io/</id><title>nth loop</title><subtitle>Incoherent set of notes with brief technical information that has been useful once and might save me some time in the future.</subtitle> <updated>2023-08-28T11:25:53+02:00</updated> <author> <name>Alex Domingo</name> <uri>https://lexming.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://lexming.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://lexming.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Alex Domingo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>File system loop with Btrfs and NFS</title><link href="https://lexming.github.io/posts/btrfs-nfs-file-system-loop/" rel="alternate" type="text/html" title="File system loop with Btrfs and NFS" /><published>2023-01-15T16:00:00+01:00</published> <updated>2023-01-15T16:00:00+01:00</updated> <id>https://lexming.github.io/posts/btrfs-nfs-file-system-loop/</id> <content src="https://lexming.github.io/posts/btrfs-nfs-file-system-loop/" /> <author> <name>Alex Domingo</name> </author> <category term="linux" /> <summary> I got the following error on a regular find command looking for files in the data directory of my Nextcloud instance: $ find /media/nextcloud/ -name "potato" find: File system loop detected; ‘/media/nextcloud/log’ is part of the same file system loop as ‘/media/nextcloud/’. find: File system loop detected; ‘/media/nextcloud/data’ is part of the same file system loop as ‘/media/nextcloud/’. fin... </summary> </entry> <entry><title>Make error: Argument list too long</title><link href="https://lexming.github.io/posts/error-argument-list-too-long/" rel="alternate" type="text/html" title="Make error: Argument list too long" /><published>2022-10-27T18:00:00+02:00</published> <updated>2022-10-27T18:00:00+02:00</updated> <id>https://lexming.github.io/posts/error-argument-list-too-long/</id> <content src="https://lexming.github.io/posts/error-argument-list-too-long/" /> <author> <name>Alex Domingo</name> </author> <category term="easybuild" /> <summary> I got the following error compiling nodejs v16.15.1 with GCC v10.3.0: touch /theia/scratch/brussel/vo/000/bvo00000/vsc10000/easybuild/install/skylake/build/nodejs/16.15.1/GCCcore-10.3.0/node-v16.15.1/out/Release/obj.target/tools/v8_gypfiles/v8_compiler_for_mksnapshot.stamp make[1]: execvp: printf: Argument list too long make[1]: *** [/theia/scratch/brussel/vo/000/bvo00000/vsc10000/eas... </summary> </entry> <entry><title>Navigating through the parent directory of symlinks in bash</title><link href="https://lexming.github.io/posts/parent-directories-symlinks/" rel="alternate" type="text/html" title="Navigating through the parent directory of symlinks in bash" /><published>2022-10-16T12:00:00+02:00</published> <updated>2022-10-16T12:00:00+02:00</updated> <id>https://lexming.github.io/posts/parent-directories-symlinks/</id> <content src="https://lexming.github.io/posts/parent-directories-symlinks/" /> <author> <name>Alex Domingo</name> </author> <category term="linux" /> <summary> Changing directory cd to a symlinked folder can have unexpected consequence on how certain commands in bash behave. For instance, assume that we have the following file structure where active_project is a symlink to a folder nested in another file tree: . ├── data │   ├── project1 │   │   ├── 01-01.csv │   │   ├── 01-02.csv │   │   └── 01-03.csv │   └── project2 │   ├── 02-aa.csv │   ... </summary> </entry> <entry><title>Kernel EFI stub boot with Btrfs root</title><link href="https://lexming.github.io/posts/kernel-efi-stub-btrfs/" rel="alternate" type="text/html" title="Kernel EFI stub boot with Btrfs root" /><published>2022-07-18T20:00:00+02:00</published> <updated>2022-07-18T20:00:00+02:00</updated> <id>https://lexming.github.io/posts/kernel-efi-stub-btrfs/</id> <content src="https://lexming.github.io/posts/kernel-efi-stub-btrfs/" /> <author> <name>Alex Domingo</name> </author> <category term="linux" /> <summary> We can directly boot into the Linux kernel without any secondary bootloader (e.g. GRUB) by enabling support in the kernel for the EFI bootloader. Processor type and features ---&amp;gt; [*] EFI runtime service support [*] EFI stub support [ ] EFI mixed-mode support The EFI bootloader also supports initramfs to handle more complex tasks early in the boot process. Typically, mo... </summary> </entry> <entry><title>Bootstrapping a headless Raspberry Pi</title><link href="https://lexming.github.io/posts/headless-raspberry-pi/" rel="alternate" type="text/html" title="Bootstrapping a headless Raspberry Pi" /><published>2022-07-09T20:00:00+02:00</published> <updated>2022-07-09T20:00:00+02:00</updated> <id>https://lexming.github.io/posts/headless-raspberry-pi/</id> <content src="https://lexming.github.io/posts/headless-raspberry-pi/" /> <author> <name>Alex Domingo</name> </author> <category term="linux" /> <summary> Nowadays, thanks to the rpi-manager from Raspberry Pi OS, it is quite trivial to bootstrap a Raspberry Pi into a working system in your network with no other interaction than inserting the SD card and plugging in the device. No peripherals and no display needed. Insert a blank SD card in your computer and launch rpi-imager Select the OS image for your Raspberry Pi Click the cogwheel but... </summary> </entry> </feed>
